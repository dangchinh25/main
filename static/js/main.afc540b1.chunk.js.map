{"version":3,"sources":["Page/About.js","Components/Header.js","Page/Home.js","Page/PhotoGalery.js","App.js","serviceWorker.js","index.js"],"names":["About","Container","className","Row","Col","md","Figure","Image","src","Caption","href","target","Header","Navbar","bg","Brand","to","Nav","Link","Button","variant","Home","PhotoGalery","useState","gallery","state","setState","API_URL","a","fetch","then","res","json","data","console","log","photos","photo","useEffect","fetchAPI","map","item","id","secret","thumbnail","App","exact","path","component","PhotoGallery","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kWAyCeA,MArCf,WACI,OACI,kBAACC,EAAA,EAAD,CAAWC,UAAU,mBACjB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACL,qCACA,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAOC,MAAR,CAAcC,IAAI,uBAClB,kBAACF,EAAA,EAAOG,QAAR,uCAMX,kBAACN,EAAA,EAAD,KACG,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACL,mCACA,+NAIA,+DACA,0BAAMH,UAAU,WAAhB,WACI,uBAAGQ,KAAK,kDAAkDC,OAAO,UAAjE,cACA,uBAAGD,KAAK,+BAA+BC,OAAO,UAA9C,WACA,uBAAGD,KAAK,qFAAqFC,OAAO,UAApG,gB,8BCOTC,MA/Bf,WAGI,OACI,6BACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,SACP,kBAACb,EAAA,EAAD,KACI,kBAACY,EAAA,EAAOE,MAAR,KACI,kBAAC,IAAD,CAAMC,GAAG,KAAT,cAEJ,yBAAKd,UAAU,YACX,kBAACe,EAAA,EAAIC,KAAL,KACI,kBAAC,IAAD,CAAMF,GAAG,UAAT,UAEJ,kBAACC,EAAA,EAAIC,KAAL,KACI,kBAAC,IAAD,CAAMF,GAAG,UAAT,UAEJ,kBAACC,EAAA,EAAIC,KAAL,KACI,kBAAC,IAAD,CAAMF,GAAG,YAAT,YAEJ,kBAACG,EAAA,EAAD,CAAQC,QAAQ,SAAhB,aCfTC,I,uCCqCAC,MA1Cf,WAAwB,IAAD,EAEOC,mBAAS,CAC/BC,QAAU,KAHK,mBAEZC,EAFY,KAELC,EAFK,KAOfC,EAAO,mKAPQ,4CASnB,sBAAAC,EAAA,sEACUC,MAAMF,GACPG,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACFC,QAAQC,IAAIF,GACZP,EAAS,CAACF,QAASS,EAAKG,OAAOC,WAL3C,4CATmB,sBAuBnB,OAJAC,qBAAU,YAnBS,mCAoBfC,KACD,IAGC,kBAACtC,EAAA,EAAD,KACI,uCAEIwB,EAAMD,QAAQgB,KAAI,SAAAC,GAAI,OAClB,kBAACnC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAOC,MAAR,CAAcC,IAAG,4CAAuCiC,EAAKC,GAA5C,YAAkDD,EAAKE,OAAvD,UAAwEC,WAAS,QAI9G,kBAACzC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,O,MCdVwC,MAff,WACE,OACE,yBAAK3C,UAAU,OACb,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAO4C,OAAK,EAACC,KAAK,IAAIC,UAAWhD,IACjC,kBAAC,IAAD,CAAO+C,KAAK,SAASC,UAAWhD,IAChC,kBAAC,IAAD,CAAO+C,KAAK,WAAWC,UAAWC,QCNxBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,MAAK,SAAAgC,GACjCA,EAAaC,kB","file":"static/js/main.afc540b1.chunk.js","sourcesContent":["import React from \"react\"\r\nimport {Container, Image, Row, Col, Figure, Nav} from \"react-bootstrap\"\r\nimport \"./About.css\"\r\n\r\nfunction About() {\r\n    return (\r\n        <Container className=\"about-container\">\r\n            <Row>\r\n                <Col md={4}>\r\n                    <h2>About</h2>\r\n                    <Figure>\r\n                        <Figure.Image src=\"Asset/IMG_4969.jpg\"/>\r\n                        <Figure.Caption>\r\n                            Stand tall over challenges.\r\n                        </Figure.Caption>\r\n                    </Figure>\r\n                </Col>\r\n            </Row>\r\n             <Row>\r\n                <Col md={10}>\r\n                    <p>Hi, </p>\r\n                    <p> \r\n                        My name is Chinh Le. I'm a freshman at The University of Texas at Dallas, major in Computer Science. \r\n                        My interest includes app and game develepment, virtual reality technology, and photography.\r\n                    </p>\r\n                    <p>Currently exploring ReactNative.</p>\r\n                    <span className=\"contact\">Contact: \r\n                        <a href=\"https://www.linkedin.com/in/chinh-le-a20113192/\" target=\"_blank\">  Linkedin</a>\r\n                        <a href=\"https://github.com/DangChinh\" target=\"_blank\"> Github</a>\r\n                        <a href=\"https://drive.google.com/file/d/1wXE1lHl5wCA8TGF_r8v8gNOTmT9f20X_/view?usp=sharing\" target=\"_blank\"> Resume</a>\r\n                    </span>\r\n\r\n                </Col>\r\n                \r\n             </Row>\r\n            \r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default About","import React, {useState} from \"react\"\r\nimport {Link} from \"react-router-dom\"\r\nimport {Navbar, Nav, Container, Button} from \"react-bootstrap\"\r\nimport \"./Header.css\"\r\n\r\nfunction Header() {\r\n\r\n\r\n    return (\r\n        <div >\r\n            <Navbar bg=\"light\">\r\n                <Container>\r\n                    <Navbar.Brand>\r\n                        <Link to=\"/\">DangChinh</Link>\r\n                    </Navbar.Brand>\r\n                    <div className=\"nav-item\">\r\n                        <Nav.Link>\r\n                            <Link to=\"/blogs\">Blogs</Link>\r\n                        </Nav.Link>\r\n                        <Nav.Link>\r\n                            <Link to=\"/about\">About</Link>\r\n                        </Nav.Link>\r\n                        <Nav.Link>\r\n                            <Link to=\"/gallery\">Gallery</Link>\r\n                        </Nav.Link>\r\n                        <Button variant=\"light\" >\r\n                            Dark\r\n                        </Button>\r\n                    </div>\r\n                </Container>\r\n            </Navbar>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from \"react\"\r\n\r\nfunction Home() {\r\n    return (\r\n        <div>\r\n            <h1>Home</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import React, {useState, useEffect} from \"react\"\r\nimport {Container, Row, Col, Image, Figure} from \"react-bootstrap\"\r\n\r\nimport \"./PhotoGallery.css\"\r\n\r\nfunction PhotoGalery() {\r\n\r\n    const [state, setState] = useState({\r\n        gallery : []\r\n    })\r\n\r\n    //base URL for the gallery\r\n    let API_URL = `https://api.flickr.com/services/rest/?method=flickr.people.getPhotos&api_key=f475fca09b09eab4f43334a38aa05a35&user_id=185265760@N03&format=json&nojsoncallback=1`\r\n\r\n    async function fetchAPI() {\r\n        await fetch(API_URL)\r\n            .then(res => res.json())\r\n            .then(data =>{\r\n                console.log(data)\r\n                setState({gallery: data.photos.photo})\r\n            })\r\n    }\r\n\r\n    //componentDidMount to get the initial data\r\n    useEffect(() =>{\r\n        fetchAPI()\r\n    }, [])\r\n\r\n    return(\r\n        <Container>\r\n            <h3>Gallery</h3>\r\n            {\r\n                state.gallery.map(item => \r\n                    <Figure>\r\n                        <Figure.Image src={`https://farm66.staticflickr.com/1/${item.id}_${item.secret}_q.jpg` } thumbnail />\r\n                    </Figure>\r\n                )\r\n            }\r\n            <Row>\r\n                <Col md={4}>\r\n                    \r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default PhotoGalery","import React from 'react';\nimport {Route, Link,Switch, BrowserRouter as Router} from \"react-router-dom\"\n\nimport About from './Page/About';\nimport Header from './Components/Header';\nimport Home from \"./Page/Home\"\nimport PhotoGallery from \"./Page/PhotoGalery\"\n\nimport \"./App.css\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <div>\n          <Header />  \n          <Route exact path=\"/\" component={About} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/gallery\" component={PhotoGallery} />\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}